#!/bin/bash
set -e

RETVAL=0

function check_for_commits {
    OLD="$1"
    NEW="$2"
    NUM_COMMITS=$(git log --oneline --no-merges "origin/${OLD}" "^origin/${NEW}" | wc -l)
    if [[ "${NUM_COMMITS}" -eq 0 ]]; then
        echo "${OLD} ($(git show --pretty=%h origin/${OLD})): no new commits that need to be merged to ${NEW}"
    else
        echo "${OLD} ($(git show --pretty=%h origin/${OLD})): ${NUM_COMMITS} new commits that need to be merged to ${NEW}"
        git --no-pager log --pretty=format:'    %h %s' --no-merges "origin/${OLD}" "^origin/${NEW}"
        echo
        RETVAL=1
    fi
    echo
}


OLDEST_INTERESTING_BRANCH=1.9


#git fetch origin
echo

BRANCHES=(
    integration
    resources-printfarm-3.2
    resources-develop-3.2
)

declare -a RELEASE_BRANCHES
readarray -t RELEASE_BRANCHES < <(git branch -a | egrep ' remotes/origin/[0-9]+\.[0-9]+$' | cut -d / -f3 | sort -V)

for I in $(seq 0 $((${#RELEASE_BRANCHES[*]} - 2))); do
    OLD="${RELEASE_BRANCHES[$I]}"
    NEW="${RELEASE_BRANCHES[$(($I+1))]}"
    if dpkg --compare-versions ${OLD} ge ${OLDEST_INTERESTING_BRANCH}; then
        check_for_commits "${OLD}" "${NEW}"
    fi
done

OLD="${RELEASE_BRANCHES[-1]}"
NEW="${BRANCHES[0]}"
check_for_commits "${OLD}" "${NEW}"

for I in $(seq 0 $((${#BRANCHES[*]} - 2))); do
    OLD="${BRANCHES[$I]}"
    NEW="${BRANCHES[$(($I+1))]}"
    check_for_commits "${OLD}" "${NEW}"
done

exit $RETVAL
